/*
Android Disable SSL Pinning frida script
Based on the script of objection
https://github.com/sensepost/objection/blob/master/objection/hooks/android/pinning/disable.js


https://labs.nettitude.com/tutorials/using-frida-to-bypass-snapchats-certificate-pinning/
Some useful strings to look/search/grep for when looking for certificate pinning related code are:

X509TrustManager
X509ExtendedTrustManager
checkServerTrusted
SSLContext
SSLSocket
SSLSocketFactory
X509Certificate
TrustManager
TrustManagerFactory
CertificateFactory
CertPathValidator
PKIXParameters
CertPath
KeyStore

*/


setTimeout(function(){ 
    Java.perform(function(){

        // Attempts to bypass SSL pinning implementations in a number of
        // ways. These include implementing a new TrustManager that will
        // accept any SSL certificate, overriding OkHTTP v3 check()
        // method etc.

        var X509TrustManager = Java.use('javax.net.ssl.X509TrustManager');
        var SSLContext = Java.use('javax.net.ssl.SSLContext');


        // Implement a new TrustManager
        // ref: https://gist.github.com/oleavr/3ca67a173ff7d207c6b8c3b0ca65a9d8
        var TrustManager = Java.registerClass({
            name: 'com.sensepost.test.TrustManager',
            implements: [X509TrustManager],
            methods: {
                checkClientTrusted: function (chain, authType) {
                },
                checkServerTrusted: function (chain, authType) {
                },
                getAcceptedIssuers: function () {
                    return [];
                }
            }
        });

        // Prepare the TrustManagers array to pass to SSLContext.init()
        var TrustManagers = [TrustManager.$new()];

        // Get a handle on the init() on the SSLContext class
        var SSLContext_init = SSLContext.init.overload(
            '[Ljavax.net.ssl.KeyManager;', '[Ljavax.net.ssl.TrustManager;', 'java.security.SecureRandom');

        // Override the init method, specifying our new TrustManager
        SSLContext_init.implementation = function (keyManager, trustManager, secureRandom) {
            SSLContext_init.call(this, keyManager, TrustManagers, secureRandom);
            console.log('[SSL-Pinning] SSLContext.init() reimplemented')
        };


        // OkHTTP v3.x

        // Wrap the logic in a try/catch as not all applications will have
        // okhttp as part of the app.
        try {

            var CertificatePinner = Java.use('okhttp3.CertificatePinner');
            CertificatePinner.check.overload('java.lang.String', 'java.util.List').implementation = function () {
            console.log('[SSL-Pinning] okhttp3.check() disabled')
            }

        } catch (err) {
            // If we dont have a ClassNotFoundException exception, raise the
            // problem encountered.
            if (err.message.indexOf('ClassNotFoundException') === 0) {
                throw new Error(err);
            }
        }

        // Appcelerator Titanium PinningTrustManager

        // Wrap the logic in a try/catch as not all applications will have
        // appcelerator as part of the app.
        try {

            var PinningTrustManager = Java.use('appcelerator.https.PinningTrustManager');
            PinningTrustManager.checkServerTrusted.implementation = function () {
                console.log('[SSL-Pinning] appcelerator.checkServerTrusted() disabled')
            }

        } catch (err) {
            // If we dont have a ClassNotFoundException exception, raise the
            // problem encountered.
            if (err.message.indexOf('ClassNotFoundException') === 0) {
                throw new Error(err);
            }
        }

        // Android 7+ TrustManagerImpl
        // The work in the following NCC blogpost was a great help for this hook!
        // hattip @AdriVillaB :)
        // https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2017/november/bypassing-androids-network-security-configuration/
        try {

            var TrustManagerImpl = Java.use('com.android.org.conscrypt.TrustManagerImpl');

            // https://github.com/google/conscrypt/blob/c88f9f55a523f128f0e4dace76a34724bfa1e88c/platform/src/main/java/org/conscrypt/TrustManagerImpl.java#L650
            TrustManagerImpl.verifyChain.implementation = function (untrustedChain, trustAnchorChain, host, clientAuth, ocspData, tlsSctData) {
                console.log('[SSL-Pinning] TrustManagerImpl.verifyChain() disabled')
                // Skip all the logic and just return the chain again :P
                return untrustedChain;
            }

        } catch (err) {
            // If we dont have a ClassNotFoundException exception, raise the
            // problem encountered.
            if (err.message.indexOf('ClassNotFoundException') === 0) {
                throw new Error(err);
            }
        }

        var OpenSSLSocketImpl = Java.use("com.android.org.conscrypt.OpenSSLSocketImpl")
        OpenSSLSocketImpl.verifyCertificateChain.implementation = function(certRefs, authMethod){
            console.log("[SSL-Pinning] OpenSSLSocket.verifyCertificateChain() disabled")
        }

    });
 },0);
